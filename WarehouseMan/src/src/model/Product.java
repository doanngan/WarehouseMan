package src.model;

import java.util.Calendar;
import java.util.List;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DClass;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.Select;
import domainapp.basics.util.Tuple;
import src.model.Provider;

public class Product {
	
	public static final String Pname = "name";
	public static final String Pidate = "idate";
	public static final String Piprice = "iprice";
	
    @DAttr(name = "id",id = true, type = Type.Integer, auto = true, length = 6,
            mutable = false, optional = false)
    private int id;
    
    private static int id_counter;
    
    @DAttr(name = Pname, type = Type.String, length = 20, optional = false)
    private String name;
    
    @DAttr(name = Pidate, type = Type.String, length = 15, optional = false)
    private String idate;
    
    @DAttr(name = Piprice, type = Type.Double, length = 15, optional = false)
    private Double iprice;
    
    @DAttr(name = "type", type = Type.Domain, length = 20, optional = false)
	  @DAssoc(ascName = "product-type", role = "type", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = TypeOfProduct.class, cardMin = 1, cardMax = 1), dependsOn = true)
	  private TypeOfProduct type;
    
    @DAttr(name = "provider", type = Type.Domain, length = 20, optional = false)
	  @DAssoc(ascName = "product-provider", role = "provider", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = Provider.class, cardMin = 1, cardMax = 1), dependsOn = true)
	  private Provider provider;
    
    
    @DOpt(type = DOpt.Type.ObjectFormConstructor)
    public Product(
            @AttrRef("name") String name,
            @AttrRef("idate") String idate,
            @AttrRef("iprice") Double iprice,
            @AttrRef("type") TypeOfProduct type,
            @AttrRef("provider") Provider provider) {
        this(null,name,idate,iprice,type,provider);
    }
    
    @DOpt(type=DOpt.Type.DataSourceConstructor)
    public Product(Integer id, String name, String idate, Double iprice, TypeOfProduct type, Provider provider) 
     {

      this.id = nextID(id);
      this.name = name;
      this.idate = idate;
      this.iprice = iprice;
      this.type = type;
      this.provider = provider;
    }
    
    
    public void setName(String name){
    	this.name = name;
    }
    
    public void setIdate(String idate){
    	this.idate = idate;
    }
    
    public void setIprice(Double iprice){
    	this.iprice = iprice;
    }
    
    public void settype(TypeOfProduct type){
    	this.type = type;
    }
    
    public Integer getId() {
        return id;
      }

      public String getName() {
        return name;
      }

      public String getIdate() {
        return idate;
      }

      public Double getIprice() {
        return iprice; 
      }

      public TypeOfProduct getType() {
        return type;
      }
     
      public Provider getProvider(){
    	  return provider;
      }
      
     private int nextID(Integer currId) {
         if (currId == null){
             id_counter++;
             return id_counter;
             }
         else {
             int num = currId.intValue();
             if (num > id_counter)
                 id_counter =num;
             return currId;
         }
     }

     @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
     public static void updateAutoGeneratedValue(
             DAttr attrib,
             Tuple derivingValue,
             Object minVal,
             Object maxVal) throws ConstraintViolationException {

         if (minVal != null && maxVal != null) {
             //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
             int maxIdVal = (Integer) maxVal;
             if (maxIdVal > id_counter) {
                 id_counter = maxIdVal;
             }
         }
     }
    
    

}

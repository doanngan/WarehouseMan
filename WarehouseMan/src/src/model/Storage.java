package src.model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.util.Tuple;
import domainapp.basics.model.meta.DOpt;

public class Storage {
	@DAttr(name = "id", id = true, auto = true, type = DAttr.Type.Integer, mutable = false, optional = false, length = 6)
	private Integer id;
	private static int idCounter;

	@DAttr(name = "date", type = Type.String, length = 30, optional = false)
	private String date;

	@DAttr(name = "product", type = Type.Domain, length = 5, optional = false)
	@DAssoc(ascName = "product-storage", role = "storage", ascType = AssocType.One2Many, endType = AssocEndType.Many, associate = @Associate(type = Product.class, cardMin = 1, cardMax = 1), dependsOn = true)
	private Product product;

	@DAttr(name = "preservation", type = Type.Domain, length = 5, optional = false)
	@DAssoc(ascName = "product-preservation", role = "preservation", ascType = AssocType.One2Many, endType = AssocEndType.Many, associate = @Associate(type = Preservation.class, cardMin = 1, cardMax = 1))
	private Preservation preservation;

	@DAttr(name = "stockKeeper", type = Type.Domain, length = 20, optional = true)
	private String StockKeeper;
	
	@DAssoc(ascName = "stockKeeper-storage", role = "stockKeeper", ascType = AssocType.One2Many, endType = AssocEndType.Many, associate = @Associate(type = StockKeeper.class, cardMin = 1, cardMax = 10))
	private stockKeeper stockKeeper;


	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	public Storage(@AttrRef("date") String date, @AttrRef("product") Product product, @AttrRef("preservation") Preservation preservation,
			@AttrRef("stockKeeper") StockKeeper stockKeeper) {
		this(null,date, product, preservation, stockKeeper);
		
	}

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public Storage(Integer id, String date, Product product, Preservation preservation,
			StockKeeper stockKeeper) {
		this.id = nextID(id);
		this.date=date;
		this.product=product;
		this.stockKeeper=stockKeeper;
		
	}
	
	public Integer getId() {
		return id;
	}

	public String getDate() {
		return date;
	}

	public void setDate(String date) {
		this.date = date;
	}

	public Product getProduct() {
		return product;
	}

	public void setProduct(Product product) {
		this.product = product;
	}

	public Preservation getPreservation() {
		return preservation;
	}

	public void setPreservation(Preservation preservation) {
		this.preservation = preservation;
	}

	public StockKeeper getStockKeeper() {
		return stockKeeper;
	}

	public void setStockKeeper(StockKeeper stockKeeper) {
		this.stockKeeper = stockKeeper;
	}

	private static int nextID(Integer currID) {
		if (currID == null) {
			idCounter++;
			return idCounter;
		} else {
			int num = currID.intValue();
			if (num > idCounter)
				idCounter = num;

			return currID;
		}
	}

	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {

			int maxIdVal = (Integer) maxVal;
			if (maxIdVal > idCounter) {
				idCounter = maxIdVal;
			}
		}
	}
}
